# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}\
    ## {{ version }} ({{ timestamp | date(format="%Y-%m-%d") }})
{% else -%}\
    ## [unreleased]
{% endif %}\
{% set grouped_commits = commits | group_by(attribute="group") %}\
{% set_global groups = [] %}\
{% for group, commits in grouped_commits -%}\
    {% set_global groups = groups | concat(with=group) %}\
{% endfor -%}\
{% for group in groups | sort %}
### {{ group | split(pat=" ") | slice(start=1) | join(sep=" ") | upper_first }}
    {% for commit in grouped_commits[group] -%}
      {% for line in commit.message | split(pat="\\n") -%}\
        {% if loop.first %}
- {{ line | upper_first }} [{{ commit.author.name }}]{% else %}  {{ line | trim }}  {% endif %}
{% endfor -%}
    {% endfor -%}
{% endfor %}\n
"""
trim = false
footer = """
<!-- generated by git-cliff -->
"""
postprocessors = [
  { pattern = "- ([Nn]ew|[Ff]ix|[Cc]hg):\\s*(.*)", replace = "- $2" },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  { body = "!skip_changelog", skip = true },
  { message = "^[Nn]ew:\\s*(.*)", group = "01. New" },
  { message = "^[Ff]ix:\\s*(.*)", group = "02. Fixes" },
  { message = "^[Cc]hg:\\s*(.*)", group = "03. Changes" },
  { field = "author.name", pattern = "(dependabot|renovate)\\[bot\\]", skip = true },
  { message = ".*", group = "10. Other" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"

# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
